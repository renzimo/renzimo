"""
Django settings for dev06 project.

Generated by 'django-admin startproject' using Django 3.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import datetime
import os
import sys
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# a.sys.path保存了python模块的搜索路径
# b.为了简化子应用的注册，可以将子应用所在目录（apps）加入到模块搜索路径中
# apps_path = os.path.join(BASE_DIR, 'apps')
# sys.path.insert(0, apps_path)
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '!s-a4udf-(4tv7$rkoevy)vsp5xgz_$09#2b7q))1^-huquuwj'

# SECURITY WARNING: don't run with debug turned on in production!
# 在开发阶段，为了便于调试，设置DEBUG = True，会将所有的报错信息打印在前台
# 项目上线之后，必须设置DEBUG = False，关闭调试模式之后，不会将报错信息打印在前台
# 一旦关闭DEBUG调试模式之后，所有的前端js、html、css文件，均找不到
# DEBUG = True
DEBUG = False

# 指定可以使用那些地址访问当前系统
ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'drf_yasg',

    # 注册子应用
    'projects',
    # 'apps.projects'
    # 'projects.apps.ProjectsConfig',
    'interfaces',
    'users',
    'configures',
    'debugtalks',
    'envs',
    'reports',
    'testcases',
    'testsuits',
    'summary',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 默认发起GET、OPTIONS以外的请求，需要携带CSRF TOKE才行
    # 可以将CsrfViewMiddleware中间件注释掉
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# 4.添加白名单
# CORS_ORIGIN_ALLOW_ALL为True, 指定所有域名(ip)都可以访问后端接口, 默认为False
CORS_ORIGIN_ALLOW_ALL = True

# CORS_ORIGIN_WHITELIST指定能够访问后端接口的ip或域名列表
# CORS_ORIGIN_WHITELIST = [
#     "http://127.0.0.1:8080",
#     "http://localhost:8080",
#     "http://192.168.1.63:8080",
#     "http://127.0.0.1:9000",
#     "http://localhost:9000",
# ]

# 允许跨域时携带Cookie, 默认为False
CORS_ALLOW_CREDENTIALS = True

ROOT_URLCONF = 'dev06.urls'

TEMPLATES = [
    {
        # 指定使用模板引擎
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 指定HTML模板存放的绝对路径
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'dev06.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases
# 指定数据库的配置信息
DATABASES = {
    # 使用的默认数据库信息
    'default': {
        # 'ENGINE': 'django.db.backends.sqlite3',
        # a.指定使用的数据库引擎（使用哪种类型数据库？）
        # 'ENGINE': 'django.db.backends.mysql',
        # b.指定数据库名称
        # 'NAME': BASE_DIR / 'db.sqlite3',
        'NAME': 'my_django',
        # c.指定数据库的用户名
        'USER': 'root',
        # d.指定数据库的密码
        'PASSWORD': '123456',
        # e.指定数据库主机地址
        'HOST': 'localhost',
        # f.指定数据库的端口号
        'PORT': 3306
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

# 指定django站点的语言
# zh-hans 为简体中文
LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

# a.可以在django settings.py全局配置文件中修改DRF的配置信息
# b.REST_FRAMEWORK字典中修改
REST_FRAMEWORK = {
    # c.在DEFAULT_PARSER_CLASSES可以指定不同的解析器
    'DEFAULT_PARSER_CLASSES': [
        # 解析json参数
        'rest_framework.parsers.JSONParser',
        # 解析www-form-urlencoded参数
        'rest_framework.parsers.FormParser',
        # 解析multipart/form-data参数
        'rest_framework.parsers.MultiPartParser'
    ],

    # d.指定后端使用的渲染器
    # 会自动根据请求头中的Accept字段来，返回前端需要的数据格式
    # 默认如果未添加Accept字段参数，那么会返回application/json
    # 默认如果指定了Accept字段为text/html，那么会返回可浏览的API页面
    'DEFAULT_RENDERER_CLASSES': [
        # 会返回json
        'rest_framework.renderers.JSONRenderer',
        # 会返回可浏览的API页面
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],

    # a.指定使用的全局过滤引擎
    # b.所有继承GenericAPIView的类视图中获取列表数据的接口，支持过滤功能
    # c.前端在过滤时，默认需要使用search作为查询字符串参数的名称，可以使用SEARCH_PARAM进行修改
    # 'DEFAULT_FILTER_BACKENDS': ['rest_framework.filters.SearchFilter'],
    # 'SEARCH_PARAM': 'se',

    # a.指定分页引擎类
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'DEFAULT_PAGINATION_CLASS': 'utils.pagination.PageNumberPagination',
    # b.必须指定每一页显示的最大数据条数
    'PAGE_SIZE': 4,

    # 指定用于支持coreapi的Schema
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',

    # 指定使用的认证类
    # a.默认DRF框架使用的认证类为session会话认证
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # 指定使用JWT Token认证
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        # b.指定session会话认证类
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication'
    ],

    # 指定使用的权限类
    # a.默认DRF框架使用的权限类为AllowAny，具备所有权限
    # 'DEFAULT_PERMISSION_CLASSES': [
    # 'rest_framework.permissions.AllowAny',
    # b.指定DRF中提供的IsAuthenticated权限类，只要登录就具备所有权限，如果不登录，则部具备任何权限
    # 可以使用python manage.py createsupseruser创建超级管理员
    #     'rest_framework.permissions.IsAuthenticated',
    # ],
}

LOGGING = {
    # 指定日志版本
    'version': 1,
    # 指定是否禁用其他日志器
    'disable_existing_loggers': False,
    # 定义日志输出的格式
    'formatters': {
        # 简单格式
        'simple': {
            'format': '%(asctime)s - [%(levelname)s] - [msg]%(message)s'
        },
        # 复杂格式
        'verbose': {
            'format': '%(asctime)s - [%(levelname)s] - %(name)s - [msg]%(message)s - [%(filename)s:%(lineno)d ]'
        },
    },
    # 指定日志过滤规则
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    # 指定日志输出渠道
    'handlers': {
        # 指定在console终端的日志配置信息
        'console': {
            # 记录日志的等级
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        # 指定在日志文件配置信息
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, "logs/dev06.log"),  # 日志文件的位置
            'maxBytes': 100 * 1024 * 1024,
            'backupCount': 10,
            'formatter': 'verbose',
            'encoding': 'utf-8',
        },
    },
    # 定义日志器
    'loggers': {
        'dev06': {  # 定义了一个名为dev06的日志器
            # 指定当前日志器关联的渠道
            'handlers': ['console', 'file'],
            'propagate': True,
            'level': 'DEBUG',  # 日志器接收的最低日志级别
        },
    }
}

# AUTH_USER_MODEL = 'users.Users'

# a.可以在全局配置settings.py中JWT_AUTH里，重写JWT相关参数
JWT_AUTH = {
    # b.指定TOKEN认证时，前端请求头中TOKEN认证值的前缀
    # c.前端需要在请求头中传递key为Authorization，value为前缀 token值，默认前缀为JWT
    # 'JWT_AUTH_HEADER_PREFIX': 'Bears',
    'JWT_RESPONSE_PAYLOAD_HANDLER':
        'utils.handle_jwt_response.jwt_response_payload_handler',

    # 指定生成的TOKEN过期时间
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=2),
}

# 可以在settings.py文件中自定义参数
# 参数名必须得为大写
REPORT_PATH = os.path.join(BASE_DIR, 'test_reports')

# 构造存在httprunner项目工程的目录
SUITES_PATH = os.path.join(BASE_DIR, 'suites')

# 构造用于存放静态文件的目录
# STATIC_ROOT名称固定
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
